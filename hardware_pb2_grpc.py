# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import hardware_pb2 as hardware__pb2


class HardwareServiceStub(object):
    """
    The HardwareService provides access to data describing the compute
    and networking profiles of the hardware available to accept workflows.

    The API supports adding new entries. While the hardware data is essential,
    not all of the properties are required for every workflow. The choice of
    workflow predicates the level of hardware detail necessary.

    Read access to individual hardware profiles is provided through the unique
    ID, MAC, and IP hardware properties.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Push = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/Push',
                request_serializer=hardware__pb2.PushRequest.SerializeToString,
                response_deserializer=hardware__pb2.Empty.FromString,
                )
        self.ByMAC = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByMAC',
                request_serializer=hardware__pb2.GetRequest.SerializeToString,
                response_deserializer=hardware__pb2.Hardware.FromString,
                )
        self.ByIP = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByIP',
                request_serializer=hardware__pb2.GetRequest.SerializeToString,
                response_deserializer=hardware__pb2.Hardware.FromString,
                )
        self.ByID = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByID',
                request_serializer=hardware__pb2.GetRequest.SerializeToString,
                response_deserializer=hardware__pb2.Hardware.FromString,
                )
        self.All = channel.unary_stream(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/All',
                request_serializer=hardware__pb2.Empty.SerializeToString,
                response_deserializer=hardware__pb2.Hardware.FromString,
                )
        self.DeprecatedWatch = channel.unary_stream(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/DeprecatedWatch',
                request_serializer=hardware__pb2.GetRequest.SerializeToString,
                response_deserializer=hardware__pb2.Hardware.FromString,
                )
        self.Delete = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.hardware.HardwareService/Delete',
                request_serializer=hardware__pb2.DeleteRequest.SerializeToString,
                response_deserializer=hardware__pb2.Empty.FromString,
                )


class HardwareServiceServicer(object):
    """
    The HardwareService provides access to data describing the compute
    and networking profiles of the hardware available to accept workflows.

    The API supports adding new entries. While the hardware data is essential,
    not all of the properties are required for every workflow. The choice of
    workflow predicates the level of hardware detail necessary.

    Read access to individual hardware profiles is provided through the unique
    ID, MAC, and IP hardware properties.
    """

    def Push(self, request, context):
        """Push adds a new Hardware profile to the data store.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ByMAC(self, request, context):
        """ByMac returns the Hardware with the given hardware MAC Address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ByIP(self, request, context):
        """ByIP returns the Hardware with the given IP Address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ByID(self, request, context):
        """ByID returns the Hardware with the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def All(self, request, context):
        """All returns all of the Hardware profiles.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeprecatedWatch(self, request, context):
        """DeprecatedWatch watches for events on the given hardware and streams the matching Hardware.
        We would like to keep Watch as the function used to stream events,
        and ideally Watch should be more powerful than the DeprecatedWatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete deletes the given hardware from the data store.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HardwareServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Push': grpc.unary_unary_rpc_method_handler(
                    servicer.Push,
                    request_deserializer=hardware__pb2.PushRequest.FromString,
                    response_serializer=hardware__pb2.Empty.SerializeToString,
            ),
            'ByMAC': grpc.unary_unary_rpc_method_handler(
                    servicer.ByMAC,
                    request_deserializer=hardware__pb2.GetRequest.FromString,
                    response_serializer=hardware__pb2.Hardware.SerializeToString,
            ),
            'ByIP': grpc.unary_unary_rpc_method_handler(
                    servicer.ByIP,
                    request_deserializer=hardware__pb2.GetRequest.FromString,
                    response_serializer=hardware__pb2.Hardware.SerializeToString,
            ),
            'ByID': grpc.unary_unary_rpc_method_handler(
                    servicer.ByID,
                    request_deserializer=hardware__pb2.GetRequest.FromString,
                    response_serializer=hardware__pb2.Hardware.SerializeToString,
            ),
            'All': grpc.unary_stream_rpc_method_handler(
                    servicer.All,
                    request_deserializer=hardware__pb2.Empty.FromString,
                    response_serializer=hardware__pb2.Hardware.SerializeToString,
            ),
            'DeprecatedWatch': grpc.unary_stream_rpc_method_handler(
                    servicer.DeprecatedWatch,
                    request_deserializer=hardware__pb2.GetRequest.FromString,
                    response_serializer=hardware__pb2.Hardware.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=hardware__pb2.DeleteRequest.FromString,
                    response_serializer=hardware__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github.com.tinkerbell.tink.protos.hardware.HardwareService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HardwareService(object):
    """
    The HardwareService provides access to data describing the compute
    and networking profiles of the hardware available to accept workflows.

    The API supports adding new entries. While the hardware data is essential,
    not all of the properties are required for every workflow. The choice of
    workflow predicates the level of hardware detail necessary.

    Read access to individual hardware profiles is provided through the unique
    ID, MAC, and IP hardware properties.
    """

    @staticmethod
    def Push(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/Push',
            hardware__pb2.PushRequest.SerializeToString,
            hardware__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ByMAC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByMAC',
            hardware__pb2.GetRequest.SerializeToString,
            hardware__pb2.Hardware.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ByIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByIP',
            hardware__pb2.GetRequest.SerializeToString,
            hardware__pb2.Hardware.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/ByID',
            hardware__pb2.GetRequest.SerializeToString,
            hardware__pb2.Hardware.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def All(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/All',
            hardware__pb2.Empty.SerializeToString,
            hardware__pb2.Hardware.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeprecatedWatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/DeprecatedWatch',
            hardware__pb2.GetRequest.SerializeToString,
            hardware__pb2.Hardware.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.hardware.HardwareService/Delete',
            hardware__pb2.DeleteRequest.SerializeToString,
            hardware__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
