# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import workflow_pb2 as workflow__pb2


class WorkflowServiceStub(object):
    """
    WorkflowService exposes various capabilities when it comes to starting and
    monitoring a workflow
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateWorkflow = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/CreateWorkflow',
                request_serializer=workflow__pb2.CreateRequest.SerializeToString,
                response_deserializer=workflow__pb2.CreateResponse.FromString,
                )
        self.GetWorkflow = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflow',
                request_serializer=workflow__pb2.GetRequest.SerializeToString,
                response_deserializer=workflow__pb2.Workflow.FromString,
                )
        self.DeleteWorkflow = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/DeleteWorkflow',
                request_serializer=workflow__pb2.GetRequest.SerializeToString,
                response_deserializer=workflow__pb2.Empty.FromString,
                )
        self.ListWorkflows = channel.unary_stream(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ListWorkflows',
                request_serializer=workflow__pb2.Empty.SerializeToString,
                response_deserializer=workflow__pb2.Workflow.FromString,
                )
        self.GetWorkflowContext = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContext',
                request_serializer=workflow__pb2.GetRequest.SerializeToString,
                response_deserializer=workflow__pb2.WorkflowContext.FromString,
                )
        self.ShowWorkflowEvents = channel.unary_stream(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ShowWorkflowEvents',
                request_serializer=workflow__pb2.GetRequest.SerializeToString,
                response_deserializer=workflow__pb2.WorkflowActionStatus.FromString,
                )
        self.GetWorkflowContextList = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContextList',
                request_serializer=workflow__pb2.WorkflowContextRequest.SerializeToString,
                response_deserializer=workflow__pb2.WorkflowContextList.FromString,
                )
        self.GetWorkflowContexts = channel.unary_stream(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContexts',
                request_serializer=workflow__pb2.WorkflowContextRequest.SerializeToString,
                response_deserializer=workflow__pb2.WorkflowContext.FromString,
                )
        self.GetWorkflowActions = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowActions',
                request_serializer=workflow__pb2.WorkflowActionsRequest.SerializeToString,
                response_deserializer=workflow__pb2.WorkflowActionList.FromString,
                )
        self.ReportActionStatus = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ReportActionStatus',
                request_serializer=workflow__pb2.WorkflowActionStatus.SerializeToString,
                response_deserializer=workflow__pb2.Empty.FromString,
                )
        self.GetWorkflowData = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowData',
                request_serializer=workflow__pb2.GetWorkflowDataRequest.SerializeToString,
                response_deserializer=workflow__pb2.GetWorkflowDataResponse.FromString,
                )
        self.GetWorkflowMetadata = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowMetadata',
                request_serializer=workflow__pb2.GetWorkflowDataRequest.SerializeToString,
                response_deserializer=workflow__pb2.GetWorkflowDataResponse.FromString,
                )
        self.GetWorkflowDataVersion = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowDataVersion',
                request_serializer=workflow__pb2.GetWorkflowDataRequest.SerializeToString,
                response_deserializer=workflow__pb2.GetWorkflowDataResponse.FromString,
                )
        self.UpdateWorkflowData = channel.unary_unary(
                '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/UpdateWorkflowData',
                request_serializer=workflow__pb2.UpdateWorkflowDataRequest.SerializeToString,
                response_deserializer=workflow__pb2.Empty.FromString,
                )


class WorkflowServiceServicer(object):
    """
    WorkflowService exposes various capabilities when it comes to starting and
    monitoring a workflow
    """

    def CreateWorkflow(self, request, context):
        """
        CreateWorkflow targets a specific hardware and it starts from a particular
        template. The selected hardware is capable of picking the
        workflow up for execution.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflow(self, request, context):
        """
        GetWorkflow returns a specific workflow by its identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkflow(self, request, context):
        """
        DeleteWorkflow deletes a workflow. This is a logical deletion. Workflow
        will stay available for inspection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkflows(self, request, context):
        """
        ListWorkflows returns a list of workflows
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowContext(self, request, context):
        """
        GetWorkflowContext returns specific information about where it is running,
        its state and so on. Useful to debug a workflow and to understand its
        current state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowWorkflowEvents(self, request, context):
        """
        ShowWorkflowEvents returns a list of events for a specific workflows
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowContextList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowContexts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportActionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowDataVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkflowData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=workflow__pb2.CreateRequest.FromString,
                    response_serializer=workflow__pb2.CreateResponse.SerializeToString,
            ),
            'GetWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflow,
                    request_deserializer=workflow__pb2.GetRequest.FromString,
                    response_serializer=workflow__pb2.Workflow.SerializeToString,
            ),
            'DeleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkflow,
                    request_deserializer=workflow__pb2.GetRequest.FromString,
                    response_serializer=workflow__pb2.Empty.SerializeToString,
            ),
            'ListWorkflows': grpc.unary_stream_rpc_method_handler(
                    servicer.ListWorkflows,
                    request_deserializer=workflow__pb2.Empty.FromString,
                    response_serializer=workflow__pb2.Workflow.SerializeToString,
            ),
            'GetWorkflowContext': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowContext,
                    request_deserializer=workflow__pb2.GetRequest.FromString,
                    response_serializer=workflow__pb2.WorkflowContext.SerializeToString,
            ),
            'ShowWorkflowEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.ShowWorkflowEvents,
                    request_deserializer=workflow__pb2.GetRequest.FromString,
                    response_serializer=workflow__pb2.WorkflowActionStatus.SerializeToString,
            ),
            'GetWorkflowContextList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowContextList,
                    request_deserializer=workflow__pb2.WorkflowContextRequest.FromString,
                    response_serializer=workflow__pb2.WorkflowContextList.SerializeToString,
            ),
            'GetWorkflowContexts': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWorkflowContexts,
                    request_deserializer=workflow__pb2.WorkflowContextRequest.FromString,
                    response_serializer=workflow__pb2.WorkflowContext.SerializeToString,
            ),
            'GetWorkflowActions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowActions,
                    request_deserializer=workflow__pb2.WorkflowActionsRequest.FromString,
                    response_serializer=workflow__pb2.WorkflowActionList.SerializeToString,
            ),
            'ReportActionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportActionStatus,
                    request_deserializer=workflow__pb2.WorkflowActionStatus.FromString,
                    response_serializer=workflow__pb2.Empty.SerializeToString,
            ),
            'GetWorkflowData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowData,
                    request_deserializer=workflow__pb2.GetWorkflowDataRequest.FromString,
                    response_serializer=workflow__pb2.GetWorkflowDataResponse.SerializeToString,
            ),
            'GetWorkflowMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowMetadata,
                    request_deserializer=workflow__pb2.GetWorkflowDataRequest.FromString,
                    response_serializer=workflow__pb2.GetWorkflowDataResponse.SerializeToString,
            ),
            'GetWorkflowDataVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowDataVersion,
                    request_deserializer=workflow__pb2.GetWorkflowDataRequest.FromString,
                    response_serializer=workflow__pb2.GetWorkflowDataResponse.SerializeToString,
            ),
            'UpdateWorkflowData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkflowData,
                    request_deserializer=workflow__pb2.UpdateWorkflowDataRequest.FromString,
                    response_serializer=workflow__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'github.com.tinkerbell.tink.protos.workflow.WorkflowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowService(object):
    """
    WorkflowService exposes various capabilities when it comes to starting and
    monitoring a workflow
    """

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/CreateWorkflow',
            workflow__pb2.CreateRequest.SerializeToString,
            workflow__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflow',
            workflow__pb2.GetRequest.SerializeToString,
            workflow__pb2.Workflow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/DeleteWorkflow',
            workflow__pb2.GetRequest.SerializeToString,
            workflow__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ListWorkflows',
            workflow__pb2.Empty.SerializeToString,
            workflow__pb2.Workflow.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContext',
            workflow__pb2.GetRequest.SerializeToString,
            workflow__pb2.WorkflowContext.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowWorkflowEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ShowWorkflowEvents',
            workflow__pb2.GetRequest.SerializeToString,
            workflow__pb2.WorkflowActionStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowContextList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContextList',
            workflow__pb2.WorkflowContextRequest.SerializeToString,
            workflow__pb2.WorkflowContextList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowContexts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowContexts',
            workflow__pb2.WorkflowContextRequest.SerializeToString,
            workflow__pb2.WorkflowContext.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowActions',
            workflow__pb2.WorkflowActionsRequest.SerializeToString,
            workflow__pb2.WorkflowActionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportActionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/ReportActionStatus',
            workflow__pb2.WorkflowActionStatus.SerializeToString,
            workflow__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowData',
            workflow__pb2.GetWorkflowDataRequest.SerializeToString,
            workflow__pb2.GetWorkflowDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowMetadata',
            workflow__pb2.GetWorkflowDataRequest.SerializeToString,
            workflow__pb2.GetWorkflowDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowDataVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/GetWorkflowDataVersion',
            workflow__pb2.GetWorkflowDataRequest.SerializeToString,
            workflow__pb2.GetWorkflowDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateWorkflowData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/github.com.tinkerbell.tink.protos.workflow.WorkflowService/UpdateWorkflowData',
            workflow__pb2.UpdateWorkflowDataRequest.SerializeToString,
            workflow__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
